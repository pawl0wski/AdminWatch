@page "/login"
@using System.ComponentModel.DataAnnotations
@using AdminWatchServer.Services
@using AdminWatchServer.Services.Auth

@inject IAuthService AuthService
@inject NavigationManager Navigator

<FluentStack
    Style="height: 100vh" 
    Orientation="Orientation.Vertical"
    HorizontalAlignment="HorizontalAlignment.Center"
    VerticalAlignment="VerticalAlignment.Center">
    <AdminWatchLogo/>

    <FluentCard MinimalStyle Style="max-width: fit-content; height: fit-content" >
        <h3>Logowanie</h3>
        <FluentEditForm 
            Model="LoginInput"
            FormName="LoginForm"
            OnValidSubmit="OnLogin">
            <FluentStack Orientation="Orientation.Vertical">
                <DataAnnotationsValidator/>

                <FluentTextField
                    Label="Nazwa użytkownika"
                    Name="LoginInput.Username"
                    Size="25"
                    @bind-Value="LoginInput!.Username"/>
                <FluentValidationMessage For="() => LoginInput.Username"/>

                <FluentTextField
                    Label="Hasło"
                    TextFieldType="TextFieldType.Password"
                    Name="LoginInput.Password"
                    Size="25"
                    @bind-Value="LoginInput!.Password"/>
                <FluentValidationMessage For="() => LoginInput.Password"/>
                <FluentCheckbox 
                    Label="Zapamiętaj mnie"
                    Name="LoginInput.RememberMe"
                    Size="25"
                    @bind-Value="LoginInput.RememberMe" />

                @if (_deniedReason is not null)
                {
                    @if (_deniedReason == LoginDeniedReason.BadPasswordOrUsername)
                    {
                        <FluentLabel
                            Style="width: 15rem"
                            Color="Color.Error">Nie udało się zalogować. Sprawdź nazwę użytkownika i hasło.</FluentLabel>
                    }

                    @if (_deniedReason == LoginDeniedReason.NotApproved)
                    {
                        <FluentLabel
                            Style="width: 15rem"
                            Color="Color.Error">Zaczekaj aż Super Administrator zaakceptuje twoje konto.</FluentLabel>
                    }
                }
                <FluentDivider />
                <FluentButton Style="width: 100%" Type="ButtonType.Submit" Appearance="Appearance.Accent">Zaloguj się</FluentButton>
            </FluentStack>
        </FluentEditForm>
    </FluentCard>
    <AuthAdditionalInfo
        TopInfo="Nie masz konta w systemie?"
        LinkText="Stwórz je tutaj"
        Href="/register"
    />
</FluentStack>

@code {

    private class UserLoginInput
    {
        [Required (ErrorMessage = "Musisz podać nazwe użytkownika")] 
        public string? Username { get; set; }

        [Required (ErrorMessage = "Musisz podać hasło")] 
        public string? Password { get; set; }

        [Required] 
        public bool RememberMe { get; set; }
    }

    [SupplyParameterFromForm]
    private UserLoginInput? LoginInput { get; set; } = new();

    private LoginDeniedReason? _deniedReason;
    
    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsLoggedIn())
            Navigator.NavigateTo("/");
    }

    private async Task OnLogin(EditContext obj)
    {
        if (LoginInput is not null)
        {
            _deniedReason = await AuthService.Login(
                LoginInput.Username!,
                LoginInput.Password!,
                LoginInput.RememberMe);

            if (_deniedReason is not null)
                return;
        
            Navigator.NavigateTo("/");
        }
    }

}