@using AdminWatchServer.Models
@using AdminWatchServer.Services

@inject IAuthService AuthService;

<FluentCard Width="20rem" Height="fit-content">

    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentPersona
                Image="@(new Icons.Regular.Size48.Person().ToDataUri(size: "25px", color: "white"))"
                ImageSize="50px"/>
            <FluentStack Orientation="Orientation.Vertical"
                         VerticalAlignment="VerticalAlignment.Center"
                         VerticalGap="5">
                <p style="margin: 0">@User.UserName</p>
                <FluentStack Orientation="Orientation.Horizontal">
                    @if (_isSuperAdmin is { IsCompletedSuccessfully: true, Result: true })
                    {
                        <FluentBadge Appearance="Appearance.Accent">Super Admin</FluentBadge>
                    }
                    else
                    {
                        <FluentBadge Appearance="Appearance.Neutral">Admin</FluentBadge>
                    }

                    @if (User.LockoutEnabled)
                    {
                        <FluentBadge Fill="red" BackgroundColor="red" Color="white">Zablokowany</FluentBadge>
                    }
                </FluentStack>
            </FluentStack>
        </FluentStack>
            <FluentDivider Style="margin: 0.2rem 0; width: 100%" Role="DividerRole.Presentation"/>
        <FluentStack
            Orientation="Orientation.Horizontal">
            <FluentButton IconStart="@(new Icons.Regular.Size16.PersonDelete())">Usu≈Ñ</FluentButton>
            @if (User.LockoutEnabled)
            {
                <FluentButton IconStart="@(new Icons.Regular.Size16.LockOpen())">Odblokuj</FluentButton>
            }
            else
            {
             <FluentButton IconStart="@(new Icons.Regular.Size16.LockClosed())">Zablokuj</FluentButton>
            }
        </FluentStack>
    </FluentStack>

</FluentCard>

@code {

    [Parameter] public required AdminWatchUser User { get; set; }

    private Task<bool>? _isSuperAdmin;

    protected override void OnInitialized()
    {
        _isSuperAdmin = CheckForSuperAdmin();
    }

    private Task<bool> CheckForSuperAdmin() => AuthService.IsSuperAdmin(User);

}