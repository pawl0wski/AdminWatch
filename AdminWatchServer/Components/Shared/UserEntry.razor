@using AdminWatchServer.Models
@using AdminWatchServer.Services
@using AdminWatchServer.Services.Auth
@rendermode InteractiveServer

@inject IAuthService AuthService;
@inject IToastService ToastService;

<FluentCard Width="20rem" Height="fit-content">

    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentPersona
                Image="@(new Icons.Regular.Size48.Person().ToDataUri(size: "25px", color: "white"))"
                ImageSize="50px"/>
            <FluentStack Orientation="Orientation.Vertical"
                         VerticalAlignment="VerticalAlignment.Center"
                         VerticalGap="5">
                <p style="margin: 0">@User.UserName</p>
                <FluentStack Orientation="Orientation.Horizontal">
                    @if (IsSuperAdmin())
                    {
                        <FluentBadge Appearance="Appearance.Accent">Super Admin</FluentBadge>
                    }
                    else
                    {
                        <FluentBadge Appearance="Appearance.Neutral">Admin</FluentBadge>
                    }

                    @if (!User.ApprovedBySuperAdmin)
                    {
                        <FluentBadge Fill="red" BackgroundColor="red" Color="white">Wymaga zatwierdzenia</FluentBadge>
                    }
                </FluentStack>
            </FluentStack>
        </FluentStack>
        <FluentDivider Style="margin: 0.2rem 0; width: 100%" Role="DividerRole.Presentation"/>
        <FluentStack
            Orientation="Orientation.Horizontal">
            <FluentButton
                OnClick="OnDelete"
                Disabled="IsSuperAdmin()"
                IconStart="@(new Icons.Regular.Size16.PersonDelete())">
                Usuń
            </FluentButton>
            @if (!User.ApprovedBySuperAdmin)
            {
                <FluentButton
                    OnClick="OnApprove"
                    Disabled="IsSuperAdmin()"
                    IconStart="@(new Icons.Regular.Size16.LockOpen())">
                    Odblokuj
                </FluentButton>
            }
            else
            {
                <FluentButton
                    OnClick="OnUnApprove"
                    Disabled="IsSuperAdmin()"
                    IconStart="@(new Icons.Regular.Size16.LockClosed())">
                    Zablokuj
                </FluentButton>
            }
        </FluentStack>
    </FluentStack>

</FluentCard>

@code {

    [Parameter] 
    public required AdminWatchUser User { get; set; }

    [Parameter]
    public required Func<Task> ApproveUser { get; set; }

    [Parameter] 
    public required Func<Task> UnApproveUser { get; set; }

    [Parameter] 
    public required Func<Task> DeleteUser { get; set; }

    private Task<bool>? _isSuperAdmin;

    protected override void OnInitialized()
    {
        _isSuperAdmin = CheckForSuperAdmin();
    }

    private bool IsSuperAdmin() => _isSuperAdmin is { IsCompletedSuccessfully: true, Result: true };

    private Task<bool> CheckForSuperAdmin() => AuthService.IsSuperAdmin(User);

    private async Task OnDelete()
    {
        try
        {
            await DeleteUser();
            ToastService.ShowInfo($"Użytkownik usunięty {User.UserName}.");
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Wystąpił błąd z usunięciem użytkownika {User.UserName}");
            throw e;
        }
    }

    private async Task OnApprove()
    {
        try
        {
            await ApproveUser();
            ToastService.ShowInfo($"Zatwierdzono użytkownika {User.UserName}.");
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Wystąpił błąd z odblokowaniem użytkownika {User.UserName}");
            throw e;
        }
    }

    private async Task OnUnApprove()
    {
        try 
        {
            await UnApproveUser();
            ToastService.ShowInfo($"Zablokowano użytkownika {User.UserName}.");
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Wystąpił błąd z zablokowaniem użytkownika {User.UserName}");
            throw e;
        }
    }

}