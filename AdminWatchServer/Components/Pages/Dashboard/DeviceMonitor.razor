@page "/dashboard/device/{DeviceId:guid}"
@rendermode InteractiveServer
@using System.Timers
@using AdminWatchServer.Services.Devices
@using AdminWatchServer.Components.Shared.DeviceMonitor
@using AdminWatchServer.DevicesConnector.Models
@using AdminWatchServer.Models
@using AdminWatchServer.Services.Processes
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@implements IDisposable
@inject IDevicesRepository DevicesRepository;
@inject IProcessessService ProcessesService;
@layout DashboardLayout;

@if (_device is not null)
{
    <FluentGrid>
        <FluentGridItem sm="12" md="6">
            <CpuMonitor
                CpuUtilizations="@_device.CpuUtilizations.TakeLast(15)"/>
        </FluentGridItem>
        <FluentGridItem sm="12" md="6">
            <MemoryMonitor
                TotalMemory="_device.Info.TotalMemory"
                MemoryOccupies="@_device.MemoryOccupies.TakeLast(15)"/>
        </FluentGridItem>
        <FluentGridItem sm="12" md="6">
            <DeviceInfoMonitor 
                DeviceInfo="_device.Info" />
        </FluentGridItem>
        <FluentGridItem sm="12" md="6">
            <DeviceProcessesList 
                Processes="_processes"
                />
        </FluentGridItem>
    </FluentGrid>
}

@code {

    [Parameter] public required Guid DeviceId { get; set; }

    private Device? _device;

    private Timer? _deviceUpdater;

    private List<DeviceProcess> _processes = [];

    protected override async Task OnInitializedAsync()
    {
        await UpdateDevice();
        _deviceUpdater = new Timer(TimeSpan.FromSeconds(3));
        _deviceUpdater.Elapsed += OnDeviceUpdaterTick;
        _deviceUpdater.Start();
    }

    private async void OnDeviceUpdaterTick(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync(UpdateDevice);
    }

    private async Task UpdateDevice()
    {
        _device = DevicesRepository.GetDevice(DeviceId);
        _processes = await ProcessesService.GetProcessesForDevice(_device);
        StateHasChanged();
    }

    public void Dispose()
    {
        _deviceUpdater?.Stop();
        _deviceUpdater?.Dispose();
    }

}